/* Generated By:JavaCC: Do not edit this line. C1Constants.java */
package com.github.situx.compiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface C1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FUNCTION = 5;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 6;
  /** RegularExpression Id. */
  int FINAL = 7;
  /** RegularExpression Id. */
  int GOTO = 8;
  /** RegularExpression Id. */
  int STATIC = 9;
  /** RegularExpression Id. */
  int TRANSIENT = 10;
  /** RegularExpression Id. */
  int PUBLIC = 11;
  /** RegularExpression Id. */
  int PRIVATE = 12;
  /** RegularExpression Id. */
  int PROTECTED = 13;
  /** RegularExpression Id. */
  int CLASS = 14;
  /** RegularExpression Id. */
  int INTERFACE = 15;
  /** RegularExpression Id. */
  int ABSTRACT = 16;
  /** RegularExpression Id. */
  int BOOLEAN = 17;
  /** RegularExpression Id. */
  int BYTE = 18;
  /** RegularExpression Id. */
  int DOUBLE = 19;
  /** RegularExpression Id. */
  int INT = 20;
  /** RegularExpression Id. */
  int VOID = 21;
  /** RegularExpression Id. */
  int LONG = 22;
  /** RegularExpression Id. */
  int SHORT = 23;
  /** RegularExpression Id. */
  int FLOAT = 24;
  /** RegularExpression Id. */
  int VOLATILE = 25;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 26;
  /** RegularExpression Id. */
  int FOR = 27;
  /** RegularExpression Id. */
  int WHILE = 28;
  /** RegularExpression Id. */
  int DO = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int ELSEIF = 32;
  /** RegularExpression Id. */
  int TRY = 33;
  /** RegularExpression Id. */
  int CATCH = 34;
  /** RegularExpression Id. */
  int FINALLY = 35;
  /** RegularExpression Id. */
  int THROWS = 36;
  /** RegularExpression Id. */
  int THROW = 37;
  /** RegularExpression Id. */
  int SWITCH = 38;
  /** RegularExpression Id. */
  int CASE = 39;
  /** RegularExpression Id. */
  int CONTINUE = 40;
  /** RegularExpression Id. */
  int EXTENDS = 41;
  /** RegularExpression Id. */
  int IMPLEMENTS = 42;
  /** RegularExpression Id. */
  int IMPORT = 43;
  /** RegularExpression Id. */
  int INSTANCEOF = 44;
  /** RegularExpression Id. */
  int THIS = 45;
  /** RegularExpression Id. */
  int TRUE = 46;
  /** RegularExpression Id. */
  int FALSE = 47;
  /** RegularExpression Id. */
  int NULL = 48;
  /** RegularExpression Id. */
  int NEW = 49;
  /** RegularExpression Id. */
  int RETURN = 50;
  /** RegularExpression Id. */
  int PACKAGE = 51;
  /** RegularExpression Id. */
  int BREAK = 52;
  /** RegularExpression Id. */
  int DEFT = 53;
  /** RegularExpression Id. */
  int NATIVE = 54;
  /** RegularExpression Id. */
  int STRICTFP = 55;
  /** RegularExpression Id. */
  int ENUM = 56;
  /** RegularExpression Id. */
  int CHAR = 57;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 58;
  /** RegularExpression Id. */
  int JAVA_DOC_COMMENT = 61;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 62;
  /** RegularExpression Id. */
  int DIVEQ = 64;
  /** RegularExpression Id. */
  int DIV = 65;
  /** RegularExpression Id. */
  int MINUSEQ = 66;
  /** RegularExpression Id. */
  int MINUSMINUS = 67;
  /** RegularExpression Id. */
  int MINUS = 68;
  /** RegularExpression Id. */
  int MODEQ = 69;
  /** RegularExpression Id. */
  int MODULO = 70;
  /** RegularExpression Id. */
  int MULTEQ = 71;
  /** RegularExpression Id. */
  int MULT = 72;
  /** RegularExpression Id. */
  int PLUSEQ = 73;
  /** RegularExpression Id. */
  int PLUSPLUS = 74;
  /** RegularExpression Id. */
  int PLUS = 75;
  /** RegularExpression Id. */
  int LPAR = 76;
  /** RegularExpression Id. */
  int RPAR = 77;
  /** RegularExpression Id. */
  int LBRK = 78;
  /** RegularExpression Id. */
  int RBRK = 79;
  /** RegularExpression Id. */
  int LBRC = 80;
  /** RegularExpression Id. */
  int RBRC = 81;
  /** RegularExpression Id. */
  int COMMA = 82;
  /** RegularExpression Id. */
  int Equals = 83;
  /** RegularExpression Id. */
  int NotEqual = 84;
  /** RegularExpression Id. */
  int NOT = 85;
  /** RegularExpression Id. */
  int ANDEQ = 86;
  /** RegularExpression Id. */
  int ANDAND = 87;
  /** RegularExpression Id. */
  int AND = 88;
  /** RegularExpression Id. */
  int OROR = 89;
  /** RegularExpression Id. */
  int OREQ = 90;
  /** RegularExpression Id. */
  int OR = 91;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQEQ = 92;
  /** RegularExpression Id. */
  int SHIFTRIGHTDOUBLE = 93;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQ = 94;
  /** RegularExpression Id. */
  int GREATEQ = 95;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 96;
  /** RegularExpression Id. */
  int GREATER = 97;
  /** RegularExpression Id. */
  int SHIFTLEFTEQ = 98;
  /** RegularExpression Id. */
  int SMALLEQ = 99;
  /** RegularExpression Id. */
  int SHIFTLEFT = 100;
  /** RegularExpression Id. */
  int SMALLER = 101;
  /** RegularExpression Id. */
  int SEM = 102;
  /** RegularExpression Id. */
  int INIT = 103;
  /** RegularExpression Id. */
  int DP = 104;
  /** RegularExpression Id. */
  int AT = 105;
  /** RegularExpression Id. */
  int CHARTK = 106;
  /** RegularExpression Id. */
  int STRTK = 107;
  /** RegularExpression Id. */
  int QUEST = 108;
  /** RegularExpression Id. */
  int BITOREQ = 109;
  /** RegularExpression Id. */
  int BITOR = 110;
  /** RegularExpression Id. */
  int TILDE = 111;
  /** RegularExpression Id. */
  int ALPHAB = 112;
  /** RegularExpression Id. */
  int FINIDENT = 113;
  /** RegularExpression Id. */
  int CLASSIDENT = 114;
  /** RegularExpression Id. */
  int VARIDENT = 115;
  /** RegularExpression Id. */
  int ELEMIDENT = 116;
  /** RegularExpression Id. */
  int PACKIDENT = 117;
  /** RegularExpression Id. */
  int IMPORTIDENT = 118;
  /** RegularExpression Id. */
  int FUNCALLIDENT = 119;
  /** RegularExpression Id. */
  int ENUMIDENT = 120;
  /** RegularExpression Id. */
  int CONSTANTD = 121;
  /** RegularExpression Id. */
  int CONSTANTF = 122;
  /** RegularExpression Id. */
  int CONSTANTL = 123;
  /** RegularExpression Id. */
  int CONSTANTI = 124;
  /** RegularExpression Id. */
  int CHARDEF = 125;
  /** RegularExpression Id. */
  int STRINGDEF = 126;
  /** RegularExpression Id. */
  int ANNOTATION = 127;
  /** RegularExpression Id. */
  int ALPHNUM = 128;
  /** RegularExpression Id. */
  int DIGIT = 129;
  /** RegularExpression Id. */
  int HEXDIGIT = 130;
  /** RegularExpression Id. */
  int OCTDIGIT = 131;
  /** RegularExpression Id. */
  int ALPHA = 132;
  /** RegularExpression Id. */
  int ALPHAALL = 133;
  /** RegularExpression Id. */
  int ALPHAC = 134;
  /** RegularExpression Id. */
  int ALPHAS = 135;
  /** RegularExpression Id. */
  int ALPHAP = 136;
  /** RegularExpression Id. */
  int LETTER = 137;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVA_DOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"function\"",
    "\"cons\"",
    "\"final\"",
    "\"goto\"",
    "\"static\"",
    "\"transient\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"class\"",
    "\"interface\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"byte\"",
    "\"double\"",
    "\"int\"",
    "\"void\"",
    "\"long\"",
    "\"short\"",
    "\"float\"",
    "\"volatile\"",
    "\"synchronized\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"throws\"",
    "\"throw\"",
    "\"switch\"",
    "\"case\"",
    "\"continue\"",
    "\"extends\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"this\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"new\"",
    "\"return\"",
    "\"package\"",
    "\"break\"",
    "\"default\"",
    "\"native\"",
    "\"strictfp\"",
    "\"enum\"",
    "\"char\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 59>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 63>",
    "\"/=\"",
    "\"/\"",
    "\"-=\"",
    "\"--\"",
    "\"-\"",
    "\"%=\"",
    "\"%\"",
    "\"*=\"",
    "\"*\"",
    "\"+=\"",
    "\"++\"",
    "\"+\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"==\"",
    "\"!=\"",
    "\"!\"",
    "\"&=\"",
    "\"&&\"",
    "\"&\"",
    "\"||\"",
    "\"|=\"",
    "\"|\"",
    "\">>>=\"",
    "\">>>\"",
    "\">>=\"",
    "\">=\"",
    "\">>\"",
    "\">\"",
    "\"<<=\"",
    "\"<=\"",
    "\"<<\"",
    "\"<\"",
    "\";\"",
    "\"=\"",
    "\":\"",
    "\"@\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"?\"",
    "\"^=\"",
    "\"^\"",
    "\"~\"",
    "<ALPHAB>",
    "<FINIDENT>",
    "<CLASSIDENT>",
    "<VARIDENT>",
    "<ELEMIDENT>",
    "<PACKIDENT>",
    "<IMPORTIDENT>",
    "<FUNCALLIDENT>",
    "<ENUMIDENT>",
    "<CONSTANTD>",
    "<CONSTANTF>",
    "<CONSTANTL>",
    "<CONSTANTI>",
    "<CHARDEF>",
    "<STRINGDEF>",
    "<ANNOTATION>",
    "<ALPHNUM>",
    "<DIGIT>",
    "<HEXDIGIT>",
    "<OCTDIGIT>",
    "<ALPHA>",
    "<ALPHAALL>",
    "<ALPHAC>",
    "<ALPHAS>",
    "<ALPHAP>",
    "<LETTER>",
  };

}
