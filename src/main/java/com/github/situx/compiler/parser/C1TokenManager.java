/* Generated By:JavaCC: Do not edit this line. C1TokenManager.java */
package com.github.situx.compiler.parser;

/** Token Manager. */
public class C1TokenManager implements C1Constants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x603200000400L) != 0L)
         {
            jjmatchedKind = 115;
            return 16;
         }
         if ((active1 & 0x20000000000L) != 0L)
            return 26;
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x3L) != 0L)
            return 29;
         if ((active0 & 0x3ff9fcdfffffbe0L) != 0L)
         {
            jjmatchedKind = 115;
            return 93;
         }
         if ((active1 & 0x80000000000L) != 0L)
            return 94;
         if ((active1 & 0x40000000000L) != 0L)
            return 20;
         return -1;
      case 1:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 34;
         if ((active0 & 0x203000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active0 & 0x3ffdfcf9ff7ffe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 1;
            }
            return 93;
         }
         if ((active0 & 0x60080000L) != 0L)
            return 93;
         return -1;
      case 2:
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 2;
            }
            return 0;
         }
         if ((active0 & 0x2000208108000L) != 0L)
            return 93;
         if ((active0 & 0x3fddffd97ef7fe0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 2;
            }
            return 93;
         }
         return -1;
      case 3:
         if ((active0 & 0x200000000000L) != 0L)
            return 1;
         if ((active0 & 0x301408180640140L) != 0L)
            return 93;
         if ((active0 & 0xfc9f7c178bfea0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 3;
            }
            return 93;
         }
         return -1;
      case 4:
         if ((active0 & 0xec1f40060bbe20L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 4;
            }
            return 93;
         }
         if ((active0 & 0x10803c11804080L) != 0L)
            return 93;
         return -1;
      case 5:
         if ((active0 & 0xa817080603b420L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
            return 93;
         }
         if ((active0 & 0x44085000080a00L) != 0L)
            return 93;
         return -1;
      case 6:
         if ((active0 & 0x8015000601a420L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
            return 93;
         }
         if ((active0 & 0x28020800021000L) != 0L)
            return 93;
         return -1;
      case 7:
         if ((active0 & 0x14000400a400L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
            return 93;
         }
         if ((active0 & 0x80010002010020L) != 0L)
            return 93;
         return -1;
      case 8:
         if ((active0 & 0x140004000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
            return 93;
         }
         if ((active0 & 0xa400L) != 0L)
            return 93;
         return -1;
      case 9:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
            return 93;
         }
         if ((active0 & 0x140000000000L) != 0L)
            return 93;
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 10;
            return 93;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 34:
         return jjStartNfaWithStates_0(0, 107, 94);
      case 37:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 38:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00000L);
      case 39:
         return jjStartNfaWithStates_0(0, 106, 20);
      case 40:
         return jjStopAtPos(0, 76);
      case 41:
         return jjStopAtPos(0, 77);
      case 42:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 43:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L);
      case 44:
         return jjStopAtPos(0, 82);
      case 45:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xcL);
      case 47:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x1L);
      case 58:
         return jjStopAtPos(0, 104);
      case 59:
         return jjStopAtPos(0, 102);
      case 60:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00000000L);
      case 61:
         jjmatchedKind = 103;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 62:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0000000L);
      case 63:
         return jjStopAtPos(0, 108);
      case 64:
         return jjStartNfaWithStates_0(0, 105, 26);
      case 91:
         return jjStopAtPos(0, 80);
      case 93:
         return jjStopAtPos(0, 81);
      case 94:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000060000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200018400004040L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000020080000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100020180000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8008090000a0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1c0040108000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x43000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000000003800L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80004004800200L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x603200000400L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2200000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 78);
      case 124:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000L);
      case 125:
         return jjStopAtPos(0, 79);
      case 126:
         return jjStopAtPos(0, 111);
      default :
         return jjMoveNfa_0(19, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      case 42:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 34);
         break;
      case 43:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 60:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 62:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x70000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x48808400000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x26000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 93);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200203010800000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x181004000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100000108000L, active1, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000a6a0140L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400200003400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000820L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040000L, active1, 0L);
      case 124:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 98);
         break;
      case 62:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000004600L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x204010201000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800002000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x108044000e0L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1822000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 93);
         return jjMoveStringLiteralDfa3_0(active0, 0x80003000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x108180010000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x44020400048100L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000080000L, active1, 0L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 49, 93);
         break;
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 92);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000803000080L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x404000020L, active1, 0L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 93);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 93);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 93);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 93);
         return jjMoveStringLiteralDfa4_0(active0, 0x20100008000L, active1, 0L);
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 93);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 93);
         return jjMoveStringLiteralDfa4_0(active0, 0x40010020800L, active1, 0L);
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 93);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 93);
         return jjMoveStringLiteralDfa4_0(active0, 0x83000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 93);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L);
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 93);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000004000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x114000012200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100000001000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80004000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 93);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 93);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000022000L);
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 93);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000a00L);
      case 107:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 93);
         break;
      case 108:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800080000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4080000018000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 93);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 93);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 93);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000020L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 119:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L);
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 93);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 93);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 93);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 93);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 93);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x102000420L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000800000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 110:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 93);
         return jjMoveStringLiteralDfa6_0(active0, 0x110000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 93);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 93);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000001000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000010000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 93);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 93);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000400L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 93);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000020L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 93);
         break;
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 93);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 93);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 93);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000002000L);
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 93);
         return jjMoveStringLiteralDfa8_0(active0, 0x40004000400L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 93);
         break;
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 93);
         break;
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 93);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 93);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 93);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 93);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(11, 26, 93);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 93;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(2, 4);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  break;
               case 29:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 47)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddStates(19, 21);
                  }
                  break;
               case 19:
                  if ((0x83ff788200000000L & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                  }
                  else if (curChar == 47)
                     jjAddStates(22, 23);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 42)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(24, 31);
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if (curChar == 48)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(32, 41);
                  }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  break;
               case 94:
                  if ((0x83ff788200000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 34)
                  {
                     if (kind > 126)
                        kind = 126;
                  }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 7:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(14, 2);
                  break;
               case 18:
                  if (curChar == 42 && kind > 118)
                     kind = 118;
                  break;
               case 21:
                  if (curChar == 39 && kind > 125)
                     kind = 125;
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0x83ff788200000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 27:
                  if ((0x83ff788200000000L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 28:
                  if (curChar == 47)
                     jjAddStates(22, 23);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddStates(19, 21);
                  break;
               case 31:
                  if ((0x2400L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 32:
                  if (curChar == 10 && kind > 58)
                     kind = 58;
                  break;
               case 33:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 36:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjAddStates(42, 43);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(44, 46);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAddStates(47, 49);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjAddStates(50, 51);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(52, 55);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(0, 3);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(56, 59);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 59:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 65:
                  if (curChar == 46)
                     jjAddStates(4, 6);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(24, 31);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar != 46)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(72);
                  break;
               case 73:
                  if (curChar != 48)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 76:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(77, 79);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(80, 78);
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 78);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(83);
                  break;
               case 84:
                  if (curChar != 48)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(32, 41);
                  break;
               case 85:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 71);
                  break;
               case 86:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(88, 82);
                  break;
               case 89:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 82);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(92);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(66, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(68);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(74, 79);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 93:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(66, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(68);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(74, 79);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 19:
                  if ((0x2ffffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(26);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(80, 102);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAddStates(103, 117);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(66, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(68);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(74, 79);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 94:
               case 23:
                  if ((0x2ffffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(66, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(68);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(74, 79);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(66, 70);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(71, 73);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(68);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddTwoStates(61, 62);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 116)
                        kind = 116;
                     jjCheckNAddTwoStates(9, 10);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddTwoStates(55, 56);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(74, 79);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAddStates(0, 3);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(118, 125);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 8:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddStates(126, 130);
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 14:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if (curChar != 64)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x2ffffffe87fffffeL & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 30:
                  if (kind > 58)
                     kind = 58;
                  jjAddStates(19, 21);
                  break;
               case 35:
                  if (kind > 59)
                     kind = 59;
                  break;
               case 37:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(103, 117);
                  break;
               case 38:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 42:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(44, 46);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 47:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(0, 3);
                  break;
               case 49:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(74, 79);
                  break;
               case 50:
                  if ((0x87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(56, 59);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(71, 73);
                  break;
               case 52:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(131, 135);
                  break;
               case 53:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(66, 70);
                  break;
               case 54:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(80, 102);
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(55, 56);
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 60:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(136, 140);
                  break;
               case 62:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 64:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 66:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 67:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 68:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(68);
                  break;
               case 78:
                  if ((0x4000000040L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 82:
                  if ((0x100000001000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 87:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(88, 82);
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(91);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjAddStates(19, 21);
                  break;
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 59)
                     kind = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 93 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x2000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   47, 48, 49, 53, 66, 67, 18, 63, 64, 65, 57, 58, 59, 11, 12, 13, 
   5, 6, 7, 30, 31, 33, 29, 36, 70, 71, 75, 76, 78, 81, 82, 83, 
   85, 71, 86, 76, 78, 87, 89, 82, 90, 92, 39, 40, 41, 42, 43, 17, 
   2, 4, 44, 45, 46, 47, 49, 52, 47, 50, 51, 49, 75, 76, 78, 86, 
   76, 78, 47, 48, 51, 49, 53, 47, 51, 49, 46, 47, 50, 51, 49, 52, 
   55, 56, 5, 6, 7, 9, 10, 11, 12, 13, 57, 58, 59, 61, 62, 63, 
   64, 65, 68, 47, 48, 49, 53, 38, 39, 40, 41, 42, 43, 3, 44, 45, 
   46, 47, 50, 51, 49, 52, 5, 6, 7, 9, 10, 11, 12, 13, 5, 6, 
   7, 9, 10, 46, 47, 51, 49, 52, 57, 58, 59, 61, 62, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\146\165\156\143\164\151\157\156", 
"\143\157\156\163", "\146\151\156\141\154", "\147\157\164\157", "\163\164\141\164\151\143", 
"\164\162\141\156\163\151\145\156\164", "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\143\154\141\163\163", "\151\156\164\145\162\146\141\143\145", 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\171\164\145", 
"\144\157\165\142\154\145", "\151\156\164", "\166\157\151\144", "\154\157\156\147", 
"\163\150\157\162\164", "\146\154\157\141\164", "\166\157\154\141\164\151\154\145", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\146\157\162", "\167\150\151\154\145", "\144\157", "\151\146", 
"\145\154\163\145", "\145\154\163\145\40\151\146", "\164\162\171", "\143\141\164\143\150", 
"\146\151\156\141\154\154\171", "\164\150\162\157\167\163", "\164\150\162\157\167", 
"\163\167\151\164\143\150", "\143\141\163\145", "\143\157\156\164\151\156\165\145", 
"\145\170\164\145\156\144\163", "\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", 
"\151\156\163\164\141\156\143\145\157\146", "\164\150\151\163", "\164\162\165\145", "\146\141\154\163\145", 
"\156\165\154\154", "\156\145\167", "\162\145\164\165\162\156", "\160\141\143\153\141\147\145", 
"\142\162\145\141\153", "\144\145\146\141\165\154\164", "\156\141\164\151\166\145", 
"\163\164\162\151\143\164\146\160", "\145\156\165\155", "\143\150\141\162", null, null, null, null, null, null, 
"\57\75", "\57", "\55\75", "\55\55", "\55", "\45\75", "\45", "\52\75", "\52", "\53\75", 
"\53\53", "\53", "\50", "\51", "\173", "\175", "\133", "\135", "\54", "\75\75", 
"\41\75", "\41", "\46\75", "\46\46", "\46", "\174\174", "\174\75", "\174", 
"\76\76\76\75", "\76\76\76", "\76\76\75", "\76\75", "\76\76", "\76", "\74\74\75", "\74\75", 
"\74\74", "\74", "\73", "\75", "\72", "\100", "\47", "\42", "\77", "\136\75", "\136", 
"\176", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_JAVA_DOC_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffffffffe1L, 0xffffffffffffffffL, 0x30L, 
};
static final long[] jjtoSkip = {
   0x640000000000001eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6400000000000000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x9800000000000000L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[93];
private final int[] jjstateSet = new int[186];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public C1TokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public C1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 93; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 63)
         {
            jjmatchedKind = 63;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 63)
         {
            jjmatchedKind = 63;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 59 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
