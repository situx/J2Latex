/* Generated By:JavaCC: Do not edit this line. C1.java */
package com.github.situx.compiler.parser;
import com.github.situx.compiler.treej.*;
import com.github.situx.compiler.treej.Number;
import treej.*;

import java.util.*;

public class C1 implements C1Constants {

/**Definition of a comment block*/
  final public Node comment() throws ParseException {
                boolean isat=false;Token com; List<String > attokens= new LinkedList<String >();String collect="";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case AT:
      case CLASSIDENT:
      case VARIDENT:
      case PACKIDENT:
      case ALPHAALL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jj_consume_token(AT);
        com = jj_consume_token(VARIDENT);
                           isat=true;attokens.add("@"+com);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHAALL:
        com = jj_consume_token(ALPHAALL);
        break;
      case VARIDENT:
        com = jj_consume_token(VARIDENT);
        break;
      case CLASSIDENT:
        com = jj_consume_token(CLASSIDENT);
        break;
      case PACKIDENT:
        com = jj_consume_token(PACKIDENT);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   if(isat)attokens.add(com+""); else collect+=com+" ";
    }
   {if (true) return new Comment(collect,attokens);}
    throw new Error("Missing return statement in function");
  }

/**Definition of class imports**/
  final public Node imports() throws ParseException {
                List<String>imports=new LinkedList<String>();Token imp,classOrStar;boolean stat=false;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                                  stat=true;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      imp = jj_consume_token(IMPORTIDENT);
                             imports.add(imp+"");
      jj_consume_token(SEM);
    }
           {if (true) return new Import(imports,stat);}
    throw new Error("Missing return statement in function");
  }

/**Definition of the program (tree root)**/
  final public Node program() throws ParseException {
                List<FunctionDef> funs=new ArrayList<FunctionDef>();FunctionDef fun;Token packagedef=null, importdef;
                                Node imports=new Literal(1),getenum;List<Node> enums= new LinkedList<Node>();ClassDef classD; List<ClassDef > classes = new ArrayList<ClassDef >();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKIDENT:
        packagedef = jj_consume_token(PACKIDENT);
        break;
      case VARIDENT:
        packagedef = jj_consume_token(VARIDENT);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEM);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    imports = imports();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case CLASS:
      case INTERFACE:
      case ABSTRACT:
      case VOLATILE:
      case SYNCHRONIZED:
      case NATIVE:
      case STRICTFP:
      case ENUM:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case CLASS:
      case INTERFACE:
      case ABSTRACT:
      case VOLATILE:
      case SYNCHRONIZED:
      case NATIVE:
      case STRICTFP:
        classD = classdef();
                     classes.add(classD);
        break;
      case ENUM:
        getenum = enumdef();
                    enums.add(getenum);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
   {if (true) return new Program(classes,imports,enums,funs,packagedef+"");}
    throw new Error("Missing return statement in function");
  }

/**Definition of the function/variable/class modifiers**/
  final public Modifier moddef() throws ParseException {
                   int vis=2,grade=4,state=2,fin=0;
Token type=new Token();
String comment="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case PRIVATE:
    case PROTECTED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        type = jj_consume_token(PUBLIC);
                  vis=1;
        break;
      case PROTECTED:
        type = jj_consume_token(PROTECTED);
                       vis=0;
        break;
      case PRIVATE:
        type = jj_consume_token(PRIVATE);
                    vis=-1;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  if(type.specialToken!=null)
        comment=type.specialToken+"";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case ABSTRACT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        type = jj_consume_token(ABSTRACT);
                    state=1;
 if(type.specialToken!=null)
        comment=type.specialToken+"";
        break;
      case STATIC:
        type = jj_consume_token(STATIC);
                  state=-1;
 if(type.specialToken!=null)
        comment=type.specialToken+"";
        break;
      case FINAL:
        type = jj_consume_token(FINAL);
                  fin=1;
 if(type.specialToken!=null)
        comment=type.specialToken+"";
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSIENT:
    case VOLATILE:
    case SYNCHRONIZED:
    case NATIVE:
    case STRICTFP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRANSIENT:
        type = jj_consume_token(TRANSIENT);
                      grade=-1;
        break;
      case VOLATILE:
        type = jj_consume_token(VOLATILE);
                      grade=0;
        break;
      case SYNCHRONIZED:
        type = jj_consume_token(SYNCHRONIZED);
                         grade=1;
        break;
      case NATIVE:
        type = jj_consume_token(NATIVE);
                   grade=2;
        break;
      case STRICTFP:
        type = jj_consume_token(STRICTFP);
                      grade=3;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  if(type.specialToken!=null)
        comment=type.specialToken+"";
  {if (true) return new Modifier(vis,grade,state,fin,comment);}
    throw new Error("Missing return statement in function");
  }

/**Definition of the datatypes**/
  final public ReturnType datdef() throws ParseException {
                     int type=0;
Token classid=new Token(),generic=new Token();
Node result=new Variable("");
List<Node >temp = new LinkedList<Node >();
String ident="";
boolean isarray=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case INT:
    case LONG:
    case FLOAT:
    case CHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        classid = jj_consume_token(BOOLEAN);
                              type=1;
        break;
      case BYTE:
        classid = jj_consume_token(BYTE);
                          type=2;
        break;
      case FLOAT:
        classid = jj_consume_token(FLOAT);
                           type=3;
        break;
      case DOUBLE:
        classid = jj_consume_token(DOUBLE);
                            type=4;
        break;
      case INT:
        classid = jj_consume_token(INT);
                         type=5;
        break;
      case LONG:
        classid = jj_consume_token(LONG);
                          type=6;
        break;
      case CHAR:
        classid = jj_consume_token(CHAR);
                          type=7;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case VOID:
      classid = jj_consume_token(VOID);
                           type=-1;
      break;
    case ALPHAB:
    case CLASSIDENT:
      temp = imps();
                      if(temp.isEmpty()) result=new Variable("");else result=temp.get(0);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_1(2)) {
      jj_consume_token(LBRC);
      jj_consume_token(RBRC);
                                       isarray=true;
    } else {
      ;
    }
         if(type!=0)
          result=new Variable(classid+"");
          if(classid.specialToken!=null){
          {if (true) return new ReturnType(type,result,classid.specialToken+"",isarray,generic+"");}
        }
         {if (true) return new ReturnType(type,result,"",isarray,generic+"");}
    throw new Error("Missing return statement in function");
  }

/**Definition of a java class.**/
  final public ClassDef classdef() throws ParseException {
                     Node mod=new Variable(""),comment;
boolean isinterface=false;Node name,ext=new Variable("");Token extNode=new Token();
Node expr;
Token cls=new Token();
List<Node> implist= new LinkedList<Node>();
List<Node > varexplist = new LinkedList<Node >();
    mod = moddef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      cls = jj_consume_token(CLASS);
      implist = imps();
                               name=implist.get(0);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        implist = imps();
                              ext=implist.get(0);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        implist = imps();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case INTERFACE:
      cls = jj_consume_token(INTERFACE);
                     isinterface=true;
      implist = imps();
                 name=implist.get(0);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        implist = imps();
                              ext=implist.get(0);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRK);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case INT:
      case VOID:
      case LONG:
      case FLOAT:
      case VOLATILE:
      case SYNCHRONIZED:
      case NATIVE:
      case STRICTFP:
      case ENUM:
      case CHAR:
      case ALPHAB:
      case CLASSIDENT:
      case ANNOTATION:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      expr = varexps();
                  varexplist.add(expr);
    }
    jj_consume_token(RBRK);
   if(cls.specialToken!=null)
        {if (true) return new ClassDef(name,ext,implist,varexplist,cls.specialToken+"",mod,isinterface);}
   {if (true) return new ClassDef(name,ext,implist,varexplist,"",mod,isinterface);}
    throw new Error("Missing return statement in function");
  }

/**The list of implemented interfaces**/
  final public List<Node> imps() throws ParseException {
                   Token ident,generic; String result;
Node classnode;
List<Node> collect = new LinkedList<Node>();
List<Node > generics = new LinkedList<Node >();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASSIDENT:
      ident = jj_consume_token(CLASSIDENT);
      break;
    case ALPHAB:
      ident = jj_consume_token(ALPHAB);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SMALLER:
      jj_consume_token(SMALLER);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALPHAB:
        case CLASSIDENT:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_6;
        }
        generics = imps();
        jj_consume_token(GREATER);
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
         if(ident.specialToken!=null)
          collect.add(new Imps(ident+"",generics,ident.specialToken+""));
        else
      collect.add(new Imps(ident+"",generics,""));
        generics=new LinkedList<Node >();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSIDENT:
        ident = jj_consume_token(CLASSIDENT);
        break;
      case ALPHAB:
        ident = jj_consume_token(ALPHAB);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SMALLER:
        jj_consume_token(SMALLER);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALPHAB:
          case CLASSIDENT:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_8;
          }
          generics = imps();
          jj_consume_token(GREATER);
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
     if(ident.specialToken!=null)
          collect.add(new Imps(ident+"",generics,ident.specialToken+""));
        else
      collect.add(new Imps(ident+"",generics,""));
    generics=new LinkedList<Node >();
    }
    {if (true) return collect;}
    throw new Error("Missing return statement in function");
  }

/**Definition of local fields**/
  final public FieldDef fielddef(boolean forloop) throws ParseException {
                                    ReturnType dat;Modifier mod;Node ass;
Number array=new Number(-1,-1,-1l,-1f,-1.,0);
Token ident=new Token();
String sident=ident+"";
List<Variable > result=new LinkedList<Variable>();
List<Number > arraylen = new LinkedList<Number >();
List<Node> asslist=new LinkedList<Node>();
    mod = moddef();
    dat = datdef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIDENT:
      ident = jj_consume_token(VARIDENT);
      break;
    case FINIDENT:
      ident = jj_consume_token(FINIDENT);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRC:
      jj_consume_token(LBRC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
        array = unary(true);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(RBRC);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
      ass = assignment(new Variable(""));
                                    asslist.add(ass);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
   result.add(new Variable(ident+""));
  arraylen.add(array);array=new Number(-1,-1,-1l,-1f,-1.,0);
  if(forloop){if (true) return new FieldDef(result,mod,dat,asslist,arraylen,"",forloop,true);}
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIDENT:
        ident = jj_consume_token(VARIDENT);
        break;
      case FINIDENT:
        ident = jj_consume_token(FINIDENT);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRC:
        jj_consume_token(LBRC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
          array = unary(true);
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(RBRC);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRK:
      case INIT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRK:
          jj_consume_token(LBRK);
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        ass = assignment(new Variable(""));
                                               asslist.add(ass);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RBRK:
          jj_consume_token(RBRK);
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
   result.add(new Variable(ident+""));arraylen.add(array);array=new Number(-1,-1,-1l,-1f,-1.,0);
    }
  {if (true) return new FieldDef(result,mod,dat,asslist,arraylen,"",forloop,true);}
    throw new Error("Missing return statement in function");
  }

/**Definition of an enum*/
  final public Node enumdef() throws ParseException {
                Token ident;
List<String > enumidentlist= new LinkedList<String >();
    jj_consume_token(ENUM);
    ident = jj_consume_token(VARIDENT);
                             enumidentlist.add(ident+"");
    jj_consume_token(LBRK);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINIDENT:
      case CLASSIDENT:
      case VARIDENT:
      case ALPHA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSIDENT:
        ident = jj_consume_token(CLASSIDENT);
        break;
      case VARIDENT:
        ident = jj_consume_token(VARIDENT);
        break;
      case ALPHA:
        ident = jj_consume_token(ALPHA);
        break;
      case FINIDENT:
        ident = jj_consume_token(FINIDENT);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                              enumidentlist.add(ident+"");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRK);
  {if (true) return new EnumDef(enumidentlist);}
    throw new Error("Missing return statement in function");
  }

/**Definition of a variable expression(modifiers and datatypes combined)*/
  final public Node varexps() throws ParseException {
                Node mod=new Variable(""),dat=new Variable(""),content,ass,params,body;Number array=new Number(-1,-1,-1l,-1f,-1.,0);
String comment="";
boolean cons=false,isabstract=false;
Token ident=new Token(),anno; List<Node > funs = new LinkedList<Node >();
 List<Node > fields = new LinkedList<Node >();
 List<Node > asslist = new LinkedList<Node >();
 List<Node > bodylist = new LinkedList<Node >();
 List<Node > datlist = new LinkedList<Node >();
 List<Number> arraylen = new LinkedList<Number >();
 List<Variable > result = new LinkedList<Variable >();
 List<Node > exceptions = new LinkedList<Node >();
 List<String > annotations = new LinkedList<String >();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATION:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_11;
      }
      anno = jj_consume_token(ANNOTATION);
                       annotations.add(anno+"");
    }
    mod = moddef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENUM:
      dat = enumdef();
      break;
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case INT:
    case VOID:
    case LONG:
    case FLOAT:
    case CHAR:
    case ALPHAB:
    case CLASSIDENT:
      dat = datdef();
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINIDENT:
    case VARIDENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIDENT:
        ident = jj_consume_token(VARIDENT);
        break;
      case FINIDENT:
        ident = jj_consume_token(FINIDENT);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      params = params();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        exceptions = imps();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEM:
        jj_consume_token(SEM);
          isabstract=true;
        break;
      case LBRK:
        jj_consume_token(LBRK);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
          case STATIC:
          case TRANSIENT:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case DOUBLE:
          case INT:
          case VOID:
          case LONG:
          case FLOAT:
          case VOLATILE:
          case SYNCHRONIZED:
          case FOR:
          case WHILE:
          case DO:
          case IF:
          case TRY:
          case THROW:
          case SWITCH:
          case TRUE:
          case FALSE:
          case NULL:
          case NEW:
          case RETURN:
          case NATIVE:
          case STRICTFP:
          case CHAR:
          case MINUSMINUS:
          case MINUS:
          case PLUSPLUS:
          case LPAR:
          case NOT:
          case QUEST:
          case TILDE:
          case ALPHAB:
          case CLASSIDENT:
          case VARIDENT:
          case ELEMIDENT:
          case CONSTANTD:
          case CONSTANTF:
          case CONSTANTL:
          case CONSTANTI:
          case CHARDEF:
          case STRINGDEF:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_12;
          }
          body = one_line();
                         bodylist.add(body);
        }
        jj_consume_token(RBRK);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         if(ident.specialToken!=null){
          {if (true) return new FunctionDef(ident+"",params,bodylist,mod,dat,ident.specialToken+"",cons,exceptions,annotations,isabstract);}
        }
        {if (true) return new FunctionDef(ident+"",params,bodylist,mod,dat,"",cons,exceptions,annotations,isabstract);}
      break;
    case LBRC:
    case COMMA:
    case SEM:
    case INIT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRC:
        jj_consume_token(LBRC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
          array = unary(true);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        jj_consume_token(RBRC);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        ass = assignment(new Variable(""));
                                            asslist.add(ass);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
           result.add(new Variable(ident+""));datlist.add(dat);arraylen.add(array);array=new Number(-1,-1,-1l,-1f,-1.,0);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIDENT:
          ident = jj_consume_token(VARIDENT);
          break;
        case FINIDENT:
          ident = jj_consume_token(FINIDENT);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRC:
          jj_consume_token(LBRC);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case CONSTANTD:
          case CONSTANTF:
          case CONSTANTL:
          case CONSTANTI:
            array = unary(true);
            break;
          default:
            jj_la1[56] = jj_gen;
            ;
          }
          jj_consume_token(RBRC);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRK:
        case INIT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRK:
            jj_consume_token(LBRK);
            break;
          default:
            jj_la1[58] = jj_gen;
            ;
          }
          ass = assignment(new Variable(""));
                                                     asslist.add(ass);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RBRK:
            jj_consume_token(RBRK);
            break;
          default:
            jj_la1[59] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
         result.add(new Variable(ident+"")); datlist.add(dat);arraylen.add(array);array=new Number(-1,-1,-1l,-1f,-1.,0);
      }
      jj_consume_token(SEM);
         if(ident.specialToken!=null)
        {
          {if (true) return new FieldDef(result,mod,dat,asslist,arraylen,ident.specialToken+"",false,false);}
        }
        {if (true) return new FieldDef(result,mod,dat,asslist,arraylen,"",false,false);}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the parameters of a function**/
  final public Node params() throws ParseException {
               List<String> result=new ArrayList<String>();List<Node> datlist=new ArrayList<Node>();List<Node> modlist=new ArrayList<Node>();Token ident;Node mod,dat;
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case STATIC:
    case TRANSIENT:
    case PUBLIC:
    case PRIVATE:
    case PROTECTED:
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case DOUBLE:
    case INT:
    case VOID:
    case LONG:
    case FLOAT:
    case VOLATILE:
    case SYNCHRONIZED:
    case NATIVE:
    case STRICTFP:
    case CHAR:
    case ALPHAB:
    case CLASSIDENT:
      mod = moddef();
      dat = datdef();
      ident = jj_consume_token(VARIDENT);
                    result.add(ident+"");modlist.add(mod);datlist.add(dat);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        mod = moddef();
        dat = datdef();
        ident = jj_consume_token(VARIDENT);
    result.add(ident+"");modlist.add(mod);datlist.add(dat);
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
   {if (true) return new Params(modlist,datlist,result);}
    throw new Error("Missing return statement in function");
  }

/**Definition of a code line in the functionbody**/
  final public Sem one_line() throws ParseException {
                Node result,com;
Token specialToken,end=new Token();
boolean setit=false;int returnornew=-1;
    if (jj_2_2(3)) {
      result = operators();
                                setit=true;
      end = jj_consume_token(SEM);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case INT:
      case VOID:
      case LONG:
      case FLOAT:
      case VOLATILE:
      case SYNCHRONIZED:
      case NATIVE:
      case STRICTFP:
      case CHAR:
      case ALPHAB:
      case CLASSIDENT:
        result = fielddef(false);
        jj_consume_token(SEM);
        break;
      case IF:
        result = ifdef();
        break;
      case SWITCH:
        result = switchcase();
        break;
      case FOR:
      case WHILE:
      case DO:
        result = loopDef();
        break;
      case TRY:
        result = trycatch();
        break;
      case RETURN:
        jj_consume_token(RETURN);
               returnornew=0;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
                                        returnornew=2;
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        result = atom();
                                                                        setit=true;
        jj_consume_token(SEM);
        break;
      case NEW:
        jj_consume_token(NEW);
            returnornew=1;
        result = varNameOrFunctionCall();
                                                           setit=true;
        jj_consume_token(SEM);
        break;
      case THROW:
        result = exception();
                       setit=true;
        jj_consume_token(SEM);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Sem(result,setit,"",returnornew);}
    throw new Error("Missing return statement in function");
  }

/**Defines the throwing of exceptions.*/
  final public Node exception() throws ParseException {
                  Node name;boolean isnew=false;
    jj_consume_token(THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
                           isnew=true;
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    name = varNameOrFunctionCall();
         {if (true) return new Except(name,isnew);}
    throw new Error("Missing return statement in function");
  }

/**The definition of if/elseif/else**/
  final public IfDef ifdef() throws ParseException {
               List<Node> bodylist=new LinkedList<Node>();
List<Node> exprlist=new LinkedList<Node>();
Node i,body;
    jj_consume_token(IF);
    jj_consume_token(LPAR);
    i = operators();
                            exprlist.add(i);
    jj_consume_token(RPAR);
    jj_consume_token(LBRK);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case INT:
      case VOID:
      case LONG:
      case FLOAT:
      case VOLATILE:
      case SYNCHRONIZED:
      case FOR:
      case WHILE:
      case DO:
      case IF:
      case TRY:
      case THROW:
      case SWITCH:
      case TRUE:
      case FALSE:
      case NULL:
      case NEW:
      case RETURN:
      case NATIVE:
      case STRICTFP:
      case CHAR:
      case MINUSMINUS:
      case MINUS:
      case PLUSPLUS:
      case LPAR:
      case NOT:
      case QUEST:
      case TILDE:
      case ALPHAB:
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
      case CHARDEF:
      case STRINGDEF:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_15;
      }
      body = one_line();
                          bodylist.add(body);
    }
    jj_consume_token(RBRK);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_16;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(LPAR);
      i = operators();
                                exprlist.add(i);
      jj_consume_token(RPAR);
      jj_consume_token(LBRK);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case STATIC:
        case TRANSIENT:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case DOUBLE:
        case INT:
        case VOID:
        case LONG:
        case FLOAT:
        case VOLATILE:
        case SYNCHRONIZED:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case TRY:
        case THROW:
        case SWITCH:
        case TRUE:
        case FALSE:
        case NULL:
        case NEW:
        case RETURN:
        case NATIVE:
        case STRICTFP:
        case CHAR:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case ALPHAB:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_17;
        }
        body = one_line();
                          bodylist.add(body);
      }
      jj_consume_token(RBRK);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LBRK);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case STATIC:
        case TRANSIENT:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case DOUBLE:
        case INT:
        case VOID:
        case LONG:
        case FLOAT:
        case VOLATILE:
        case SYNCHRONIZED:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case TRY:
        case THROW:
        case SWITCH:
        case TRUE:
        case FALSE:
        case NULL:
        case NEW:
        case RETURN:
        case NATIVE:
        case STRICTFP:
        case CHAR:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case ALPHAB:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_18;
        }
        body = one_line();
                                  bodylist.add(body);
      }
      jj_consume_token(RBRK);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
   {if (true) return new IfDef(bodylist,exprlist,false);}
    throw new Error("Missing return statement in function");
  }

/**Definition of the ternary if expression.*/
  final public IfDef ternary(Node i2) throws ParseException {
                        List<Node> bodylist=new LinkedList<Node>();
List<Node> exprlist=new LinkedList<Node>();
Node i,body;
   exprlist.add(i2);
    jj_consume_token(QUEST);
    body = atom();
                         bodylist.add(body);
    jj_consume_token(DP);
    body = atom();
                         bodylist.add(body);
   {if (true) return new IfDef(bodylist,exprlist,true);}
    throw new Error("Missing return statement in function");
  }

/**The definition of switch/case**/
  final public Node switchcase() throws ParseException {
  Node casex,exp;
  Token ident=new Token();
  List<Node> cases = new LinkedList<Node>();
  List<Node >constants=new LinkedList<Node >();
  List<Integer > hasbreak=new LinkedList<Integer >();
  int defaultpos=-1;
    jj_consume_token(SWITCH);
    jj_consume_token(LPAR);
    exp = operators();
    jj_consume_token(RPAR);
    jj_consume_token(LBRK);
    label_19:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case LPAR:
      case QUEST:
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
      case CHARDEF:
      case STRINGDEF:
        exp = atom();
                    constants.add(exp);
        break;
      case FINIDENT:
        ident = jj_consume_token(FINIDENT);
                                                              constants.add(new Variable(ident+""));
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DP);
      casex = casebody();
                                 cases.add(casex);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEM);
                           hasbreak.add(cases.size()-1);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFT:
      jj_consume_token(DEFT);
      jj_consume_token(DP);
      casex = casebody();
                                           cases.add(casex);defaultpos=cases.size()-1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEM);
                         hasbreak.add(cases.size()-1);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_20;
      }
      jj_consume_token(CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case MINUS:
      case LPAR:
      case QUEST:
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
      case CHARDEF:
      case STRINGDEF:
        exp = atom();
                             constants.add(exp);
        break;
      case FINIDENT:
        ident = jj_consume_token(FINIDENT);
                                                                       constants.add(new Variable(ident+""));
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DP);
      casex = casebody();
                                cases.add(casex);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEM);
                           hasbreak.add(cases.size()-1);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRK);
         {if (true) return new Switch(cases,constants,exp,defaultpos,hasbreak);}
    throw new Error("Missing return statement in function");
  }

/**The defintion of a case body in a switch/case statement**/
  final public Node casebody() throws ParseException {
                 Node line; List<Node> lines= new LinkedList<Node>();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case INT:
      case VOID:
      case LONG:
      case FLOAT:
      case VOLATILE:
      case SYNCHRONIZED:
      case FOR:
      case WHILE:
      case DO:
      case IF:
      case TRY:
      case THROW:
      case SWITCH:
      case TRUE:
      case FALSE:
      case NULL:
      case NEW:
      case RETURN:
      case NATIVE:
      case STRICTFP:
      case CHAR:
      case MINUSMINUS:
      case MINUS:
      case PLUSPLUS:
      case LPAR:
      case NOT:
      case QUEST:
      case TILDE:
      case ALPHAB:
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
      case CHARDEF:
      case STRINGDEF:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_21;
      }
      line = one_line();
                          lines.add(line);
    }
           {if (true) return new Casebody(lines);}
    throw new Error("Missing return statement in function");
  }

/**The definition of a try/catch block**/
  final public Node trycatch() throws ParseException {
                 Node trybody,catchbody,finallybody;List<Node > catchbodies = new LinkedList<Node >();List<Node > catchargs = new LinkedList<Node >();boolean hasfinally=false;
    jj_consume_token(TRY);
    jj_consume_token(LBRK);
    trybody = casebody();
    jj_consume_token(RBRK);
    label_22:
    while (true) {
      jj_consume_token(CATCH);
      catchbody = params();
                                      catchargs.add(catchbody);
      jj_consume_token(LBRK);
      catchbody = casebody();
                                      catchbodies.add(catchbody);
      jj_consume_token(RBRK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_22;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      jj_consume_token(LBRK);
      finallybody = casebody();
                                                    catchbodies.add(finallybody);hasfinally=true;
      jj_consume_token(RBRK);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
         {if (true) return new TryCatch(trybody,catchargs,catchbodies,hasfinally);}
    throw new Error("Missing return statement in function");
  }

/**Declaration of for/foreach/while/dowhile loops**/
  final public Node loopDef() throws ParseException {
                Node exp,
body=new Comment("",new LinkedList<String >());
List<Node> bodylist=new LinkedList<Node>();
List<Node >exps=new LinkedList<Node>();
Token ident;int loop=-2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case STATIC:
      case TRANSIENT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case DOUBLE:
      case INT:
      case VOID:
      case LONG:
      case FLOAT:
      case VOLATILE:
      case SYNCHRONIZED:
      case NATIVE:
      case STRICTFP:
      case CHAR:
      case ALPHAB:
      case CLASSIDENT:
        exp = fielddef(true);
                                         exps.add(exp);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEM:
        jj_consume_token(SEM);
            loop=-1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          exp = operators();
                     exps.add(exp);
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        jj_consume_token(SEM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case NULL:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          exp = operators();
                     exps.add(exp);
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        break;
      case DP:
        jj_consume_token(DP);
         loop=2;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PACKIDENT:
          ident = jj_consume_token(PACKIDENT);
          break;
        case VARIDENT:
          ident = jj_consume_token(VARIDENT);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                           exps.add(new Variable(ident+""));
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAR);
      jj_consume_token(LBRK);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case STATIC:
        case TRANSIENT:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case DOUBLE:
        case INT:
        case VOID:
        case LONG:
        case FLOAT:
        case VOLATILE:
        case SYNCHRONIZED:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case TRY:
        case THROW:
        case SWITCH:
        case TRUE:
        case FALSE:
        case NULL:
        case NEW:
        case RETURN:
        case NATIVE:
        case STRICTFP:
        case CHAR:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case ALPHAB:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_23;
        }
        body = one_line();
      }
                                     bodylist.add(body);
      jj_consume_token(RBRK);
      break;
    case DO:
      jj_consume_token(DO);
         loop=1;
      jj_consume_token(LBRK);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case STATIC:
        case TRANSIENT:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case DOUBLE:
        case INT:
        case VOID:
        case LONG:
        case FLOAT:
        case VOLATILE:
        case SYNCHRONIZED:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case TRY:
        case THROW:
        case SWITCH:
        case TRUE:
        case FALSE:
        case NULL:
        case NEW:
        case RETURN:
        case NATIVE:
        case STRICTFP:
        case CHAR:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case ALPHAB:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_24;
        }
        body = one_line();
      }
                             bodylist.add(body);
      jj_consume_token(RBRK);
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      exp = operators();
                                       exps.add(exp);
      jj_consume_token(RPAR);
      jj_consume_token(SEM);
      break;
    case WHILE:
      jj_consume_token(WHILE);
            loop=0;
      jj_consume_token(LPAR);
      exp = operators();
                                               exps.add(exp);
      jj_consume_token(RPAR);
      jj_consume_token(LBRK);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
        case STATIC:
        case TRANSIENT:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case DOUBLE:
        case INT:
        case VOID:
        case LONG:
        case FLOAT:
        case VOLATILE:
        case SYNCHRONIZED:
        case FOR:
        case WHILE:
        case DO:
        case IF:
        case TRY:
        case THROW:
        case SWITCH:
        case TRUE:
        case FALSE:
        case NULL:
        case NEW:
        case RETURN:
        case NATIVE:
        case STRICTFP:
        case CHAR:
        case MINUSMINUS:
        case MINUS:
        case PLUSPLUS:
        case LPAR:
        case NOT:
        case QUEST:
        case TILDE:
        case ALPHAB:
        case CLASSIDENT:
        case VARIDENT:
        case ELEMIDENT:
        case CONSTANTD:
        case CONSTANTF:
        case CONSTANTL:
        case CONSTANTI:
        case CHARDEF:
        case STRINGDEF:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_25;
        }
        body = one_line();
      }
                             bodylist.add(body);
      jj_consume_token(RBRK);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if(loop>-2){if (true) return new Loop(bodylist,loop,exps);}
    throw new Error("Missing return statement in function");
  }

  final public Node operators() throws ParseException {
                    Node i1=new Variable(""); Node i2=new Variable("");boolean inMult=false,other=false,sem=false,eq=false;
    i1 = preinc();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INIT:
      i1 = assignment(i1);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    i1 = term(i1);
    i1 = smallgreat(i1);
    i1 = greater(i1);
    i1 = addmin(i1);
    i1 = modulo(i1);
    i1 = shift(i1);
    i1 = andor(i1);
    i1 = postinc(i1);
   {if (true) return i1;}
    throw new Error("Missing return statement in function");
  }

/**Definition of the shift operations**/
  final public Node addmin(Node i2) throws ParseException {
                        Node i; boolean add=false,eq=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUSEQ:
    case MINUS:
    case PLUSEQ:
    case PLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                   add=true;
        break;
      case PLUSEQ:
        jj_consume_token(PLUSEQ);
                      add=true;eq=true;
        break;
      case MINUSEQ:
        jj_consume_token(MINUSEQ);
                        add=false;eq=true;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                   add=false;
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = operators();
                      if(add)
       {if (true) return new Add(i2,i,eq);}
       {if (true) return new Minus(i2,i,eq);}
      break;
    default:
      jj_la1[93] = jj_gen;
   {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the and/or operations**/
  final public Node andor(Node i2) throws ParseException {
                       Node i; int mode=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANDEQ:
    case ANDAND:
    case AND:
    case OROR:
    case OREQ:
    case OR:
    case BITOREQ:
    case BITOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
                 mode=4;
        break;
      case OREQ:
        jj_consume_token(OREQ);
                                    mode=6;
        break;
      case OROR:
        jj_consume_token(OROR);
                                                      mode=5;
        break;
      case BITOR:
        jj_consume_token(BITOR);
                   mode=7;
        break;
      case BITOREQ:
        jj_consume_token(BITOREQ);
                                        mode=8;
        break;
      case AND:
        jj_consume_token(AND);
                  mode=1;
        break;
      case ANDEQ:
        jj_consume_token(ANDEQ);
                                      mode=3;
        break;
      case ANDAND:
        jj_consume_token(ANDAND);
                                                         mode=2;
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = operators();
                      {if (true) return new AndOr(i2,i,mode);}
      break;
    default:
      jj_la1[95] = jj_gen;
           {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the and/or operations**/
  final public Node modulo(Node i2) throws ParseException {
                        Node i;boolean eq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODEQ:
    case MODULO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULO:
        jj_consume_token(MODULO);
                     eq=false;
        break;
      case MODEQ:
        jj_consume_token(MODEQ);
                                           eq=true;
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = operators();
         {if (true) return new Modulo(i2,i,eq);}
      break;
    default:
      jj_la1[97] = jj_gen;
         {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of an assignment**/
  final public Node assignment(Node i2) throws ParseException {
                            Node i;Token n;boolean insertnew=false;
    jj_consume_token(INIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case MINUS:
    case LPAR:
    case QUEST:
    case CLASSIDENT:
    case VARIDENT:
    case ELEMIDENT:
    case CONSTANTD:
    case CONSTANTF:
    case CONSTANTL:
    case CONSTANTI:
    case CHARDEF:
    case STRINGDEF:
      i = atom();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUEST:
        i = ternary(i);
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      break;
    case NEW:
      jj_consume_token(NEW);
                   insertnew=true;
      i = varNameOrFunctionCall();
      break;
    case FINIDENT:
      n = jj_consume_token(FINIDENT);
                         i=new Variable(""+n);
      break;
    case THIS:
      jj_consume_token(THIS);
                   i=new Variable("this");
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return new Assignment(i2,i,insertnew);}
    throw new Error("Missing return statement in function");
  }

/**Definition of the shift operations**/
  final public Node shift(Node i2) throws ParseException {
                       Node i; boolean left=false,doit=false;int eq=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SHIFTRIGHTEQEQ:
    case SHIFTRIGHTDOUBLE:
    case SHIFTRIGHTEQ:
    case SHIFTRIGHT:
    case SHIFTLEFTEQ:
    case SHIFTLEFT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFTLEFT:
        jj_consume_token(SHIFTLEFT);
                        left=true; doit=true;
        break;
      case SHIFTLEFTEQ:
        jj_consume_token(SHIFTLEFTEQ);
                         left=true;doit=true;eq=1;
        break;
      case SHIFTRIGHT:
        jj_consume_token(SHIFTRIGHT);
                         doit=true;
        break;
      case SHIFTRIGHTEQ:
        jj_consume_token(SHIFTRIGHTEQ);
                           doit=true;eq=1;
        break;
      case SHIFTRIGHTDOUBLE:
        jj_consume_token(SHIFTRIGHTDOUBLE);
                              doit=true;eq=2;
        break;
      case SHIFTRIGHTEQEQ:
        jj_consume_token(SHIFTRIGHTEQEQ);
                            doit=true;eq=3;
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = operators();
                      {if (true) return new Shift(i2,i,left,eq);}
      break;
    default:
      jj_la1[101] = jj_gen;
   {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the preinc/predec operation**/
  final public Node preinc() throws ParseException {
                 Node i; int mode=-1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUSMINUS:
    case PLUSPLUS:
    case NOT:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
                      mode=0;
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
                        mode=1;
        break;
      case NOT:
        jj_consume_token(NOT);
                 mode=2;
        break;
      case TILDE:
        jj_consume_token(TILDE);
                   mode=3;
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    i = atom();
         switch(mode){
          case 0: {if (true) return new Add(new Variable("+"),i);}
          case 1: {if (true) return new Minus(new Variable("-"),i);}
          case 2: {if (true) return new NotDef(i,true);}
          case 3: {if (true) return new NotDef(i,false);}
          default:{if (true) return i;}
        }
    throw new Error("Missing return statement in function");
  }

/**Definition of the postinc/postdec operation**/
  final public Node postinc(Node i) throws ParseException {
                        boolean inc=false; boolean doit=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUSMINUS:
    case PLUSPLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
                       inc=true; doit=true;
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
                        inc=false; doit=true;
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
         if(doit && inc)
                {if (true) return new Add(i,new Variable("+"));}
         else if(doit && !inc)
          {if (true) return new Minus(i,new Variable("-"));}
      break;
    default:
      jj_la1[105] = jj_gen;
  {if (true) return i;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node greater(Node i2) throws ParseException {
                         Node i; int mode=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
    case Equals:
    case NotEqual:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Equals:
        jj_consume_token(Equals);
                     mode=1;
        break;
      case NotEqual:
        jj_consume_token(NotEqual);
                                            mode=2;
        break;
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
                         mode=3;
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = atom();
                 {if (true) return new Equals(i2,i,mode);}
      break;
    default:
      jj_la1[107] = jj_gen;
         {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the shift operations**/
  final public Node smallgreat(Node i2) throws ParseException {
                            Node i; boolean left=false;boolean eq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATEQ:
    case GREATER:
    case SMALLEQ:
    case SMALLER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER:
        jj_consume_token(GREATER);
                      left=false; eq=false;
        break;
      case GREATEQ:
        jj_consume_token(GREATEQ);
                                                            left=false; eq=true;
        break;
      case SMALLER:
        jj_consume_token(SMALLER);
                      left=true; eq=false;
        break;
      case SMALLEQ:
        jj_consume_token(SMALLEQ);
                                                          left=true; eq=true;
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = atom();
                 {if (true) return new Greater(i2,i,left,eq);}
      break;
    default:
      jj_la1[109] = jj_gen;
   {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Definition of the mult/div operations**/
  final public Node term(Node i2) throws ParseException {
                      Node i=new Variable("");boolean inMult=false;boolean eq=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIVEQ:
    case DIV:
    case MULTEQ:
    case MULT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
        jj_consume_token(DIV);
            inMult=false;
        break;
      case DIVEQ:
        jj_consume_token(DIVEQ);
                                   inMult=false;eq=true;
        break;
      case MULT:
        jj_consume_token(MULT);
           inMult=true;
        break;
      case MULTEQ:
        jj_consume_token(MULTEQ);
                                  inMult=true;eq=true;
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      i = atom();
      if(inMult)
          {if (true) return new Mult(i2,i,eq);}
     else if(!inMult)
         {if (true) return new Div(i2,i,eq);}
      break;
    default:
      jj_la1[111] = jj_gen;
   {if (true) return i2;}
    }
    throw new Error("Missing return statement in function");
  }

/**Differentiation from a varName, an unary constant and a FunctionCall**/
  final public Node atom() throws ParseException {
               Node i=new Variable(""),dat=new Variable("");Token t;boolean typecast=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARDEF:
    case STRINGDEF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARDEF:
        t = jj_consume_token(CHARDEF);
               {if (true) return new StringOrCharConst(t+"",false);}
        break;
      case STRINGDEF:
        t = jj_consume_token(STRINGDEF);
                 {if (true) return new StringOrCharConst(t+"",true);}
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TRUE:
    case FALSE:
    case NULL:
    case MINUS:
    case LPAR:
    case QUEST:
    case CLASSIDENT:
    case VARIDENT:
    case ELEMIDENT:
    case CONSTANTD:
    case CONSTANTF:
    case CONSTANTL:
    case CONSTANTI:
      if (jj_2_4(5)) {
        jj_consume_token(LPAR);
        dat = datdef();
                                   typecast=true;
        jj_consume_token(RPAR);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
        i = unary(false);
                  {if (true) return new Atom(i,dat,false,typecast);}
        break;
      case TRUE:
      case FALSE:
      case NULL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        case NULL:
          t = jj_consume_token(NULL);
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
   {if (true) return new StringOrCharConst(t+"",true);}
        break;
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
        i = varNameOrFunctionCall();
                             {if (true) return new Atom(i,dat,false,typecast);}
        break;
      case QUEST:
        i = ternary(i);
               {if (true) return new Atom(i,dat,false,typecast);}
        break;
      case LPAR:
        jj_consume_token(LPAR);
        i = operators();
        jj_consume_token(RPAR);
                              {if (true) return new Atom(i,dat,true,typecast);}
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**Differentiation of a varName or a functionCall**/
  final public Node varNameOrFunctionCall() throws ParseException {
                                Token ident=new Token(),generic=new Token();
 boolean isFunCall=false,generics=false;
 Number array=new Number(-1,-1,-1l,-1f,-1.,0);
 List<Node> args=new LinkedList<Node>();
 List<Node > varexplist= new LinkedList<Node >();
 Node arg,expr;
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIDENT:
        ident = jj_consume_token(VARIDENT);
        break;
      case CLASSIDENT:
        ident = jj_consume_token(CLASSIDENT);
        if (jj_2_5(3)) {
          jj_consume_token(SMALLER);
          generic = jj_consume_token(CLASSIDENT);
          jj_consume_token(GREATER);
        } else {
          ;
        }
        break;
      case ELEMIDENT:
        ident = jj_consume_token(ELEMIDENT);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_26;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRC:
      jj_consume_token(LBRC);
      array = unary(true);
      jj_consume_token(RBRC);
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
           isFunCall=true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NULL:
      case MINUSMINUS:
      case MINUS:
      case PLUSPLUS:
      case LPAR:
      case NOT:
      case QUEST:
      case TILDE:
      case CLASSIDENT:
      case VARIDENT:
      case ELEMIDENT:
      case CONSTANTD:
      case CONSTANTF:
      case CONSTANTL:
      case CONSTANTI:
      case CHARDEF:
      case STRINGDEF:
        arg = operators();
                                            args.add(arg);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[119] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          arg = operators();
                            args.add(arg);
        }
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRK:
        jj_consume_token(LBRK);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FINAL:
          case STATIC:
          case TRANSIENT:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case DOUBLE:
          case INT:
          case VOID:
          case LONG:
          case FLOAT:
          case VOLATILE:
          case SYNCHRONIZED:
          case NATIVE:
          case STRICTFP:
          case ENUM:
          case CHAR:
          case ALPHAB:
          case CLASSIDENT:
          case ANNOTATION:
            ;
            break;
          default:
            jj_la1[121] = jj_gen;
            break label_28;
          }
          expr = varexps();
                           varexplist.add(expr);
        }
        jj_consume_token(RBRK);
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
   {if (true) return isFunCall?new FunCall(ident+"",args,varexplist,generic+""):new Variable(ident+"",array);}
    throw new Error("Missing return statement in function");
  }

/**Definition of a positive or negative unary**/
  final public Number unary(boolean array) throws ParseException {
                              Number temp;boolean minus=false;String result="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case CONSTANTI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
              minus=true;
        break;
      default:
        jj_la1[124] = jj_gen;
        ;
      }
      token = jj_consume_token(CONSTANTI);
   if(minus)
                result="-"+token;
        else
                result=""+token;
        if(result.contains("x") || result.contains("X"))
            {if (true) return new Number(0,Integer.parseInt(result.substring(2,result.length()),16),-1l,-1f,-1.,1);}
        else if(result.charAt(0)=='0' && result.length()>1)
                {if (true) return new Number(0,Integer.parseInt(result,8),-1l,-1f,-1.,2);}
        {if (true) return new Number(0,Integer.parseInt(result),-1l,-1f,-1.,0);}
      break;
    case CONSTANTL:
      token = jj_consume_token(CONSTANTL);
   if(array)
        {if (true) throw new ParseException();}
 if(minus)
                result="-"+token;
        else
                result=""+token;
        if(result.contains("x") || result.contains("X"))
            {if (true) return new Number(0,Integer.parseInt(result.substring(2,result.length()),16),-1l,-1f,-1.,1);}
        else if(result.charAt(0)=='0' && result.length()>1)
                {if (true) return new Number(0,Integer.parseInt(result,8),-1l,-1f,-1.,2);}
        {if (true) return new Number(0,Integer.parseInt(result),-1l,-1f,-1.,0);}
      break;
    case CONSTANTF:
      token = jj_consume_token(CONSTANTF);
   if(array)
        {if (true) throw new ParseException();}
        if(minus)
                result="-"+token;
        else
                result=""+token;
    {if (true) return new Number(2,-1,-1l,new Float(result),-1.,0);}
      break;
    case CONSTANTD:
      token = jj_consume_token(CONSTANTD);
   if(array)
        {if (true) throw new ParseException();}
        if(minus)
                result="-"+token;
        else
                result=""+token;
    {if (true) return new Number(3,-1,-1l,-1f,new Double(result),0);}
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(CONSTANTD)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(CONSTANTF)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(CONSTANTL)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(SMALLER)) return true;
    if (jj_scan_token(CLASSIDENT)) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(FINIDENT)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    if (jj_scan_token(CONSTANTI)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(SMALLER)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(LBRC)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(CLASSIDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_74()) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    if (jj_3R_134()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(SMALLER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(GREATEQ)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(SMALLEQ)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(DIVEQ)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(MULTEQ)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(STRINGDEF)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(CHARDEF)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(NotEqual)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LBRC)) return true;
    if (jj_scan_token(RBRC)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(SMALLER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(QUEST)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(DP)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(Equals)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(MINUSMINUS)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(MINUSMINUS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(SEM)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(ANDAND)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(OROR)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(SHIFTRIGHTEQEQ)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(SHIFTRIGHTDOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(SHIFTRIGHTEQ)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(MODEQ)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(SHIFTRIGHT)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(SHIFTLEFTEQ)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(SHIFTLEFT)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(FINIDENT)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(ANDEQ)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(BITOREQ)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(OREQ)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(INIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58() {
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(MODULO)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(BITOR)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(MINUSEQ)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(PLUSEQ)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_56() {
    return false;
  }

  /** Generated Token Manager. */
  public C1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[126];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x601fe80,0x601fe80,0x3800,0x3800,0x10280,0x10280,0x6000400,0x6000400,0x15e0000,0x17e0000,0x0,0x0,0x0,0xc000,0x77f3e80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17e0000,0x0,0x0,0x0,0x7f7f3e80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x77f3e80,0x0,0x7f7f3e80,0x0,0x7f7f3e80,0x0,0x7f7f3e80,0x7f7f3e80,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f7f3e80,0x0,0x0,0x77f3e80,0x0,0x0,0x0,0x0,0x7f7f3e80,0x7f7f3e80,0x7f7f3e80,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x77f3e80,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x80000,0x1c00000,0x1c00000,0x0,0x0,0x0,0x0,0xc00000,0xc00000,0x2000000,0x2000000,0x200,0x400,0x200,0x0,0x3c00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x10,0x2c7c062,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00000,0x20000,0x2c60062,0x20000,0x2c7c062,0x1,0x2c7c062,0x2c7c062,0x0,0x1c000,0x100000,0x100000,0x200000,0x80,0x1c000,0x100000,0x2c7c062,0x4,0x8,0x2c00000,0x1c000,0x1c000,0x0,0x0,0x2c7c062,0x2c7c062,0x2c7c062,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x1c000,0x1c000,0x1c000,0x0,0x0,0x0,0x0,0x1c000,0x3c00000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x10,0x10000,0x0,0x40000,0x0,0x10,0x10000,0x4000,0x8000,0x4000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x201418,0x4000,0x10,0x10000,0x0,0x40000,0x0,0x10,0x10000,0x4000,0x8000,0x4000,0x51000,0x40000,0x0,0x0,0x0,0x0,0x201418,0x0,0x201418,0x201418,0x0,0x1010,0x0,0x0,0x0,0x0,0x1010,0x0,0x201418,0x0,0x0,0x0,0x201418,0x201418,0x0,0x0,0x201418,0x201418,0x201418,0x0,0x0,0xa14,0xa14,0xfc00000,0xfc00000,0x60,0x60,0x0,0x1010,0x70000000,0x70000000,0x200408,0x200408,0x408,0x408,0x180000,0x180000,0x80000000,0x80000000,0x183,0x183,0x0,0x0,0x1010,0x1010,0x0,0x0,0x10000,0x40000,0x201418,0x0,0x4000,0x1000,0x10,0x10,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x2c0200,0x0,0x200,0x2c0000,0x0,0x0,0x280000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x50000,0x0,0x0,0x0,0x0,0x80050000,0x50000,0x50000,0x20,0x0,0x50000,0x50000,0x20,0xa0000,0x1e000000,0x0,0x80,0x0,0xa0000,0x1e000000,0x0,0x0,0x0,0x80,0xe0000,0xe0000,0x0,0x80000000,0x50000,0xa0000,0xa0000,0x0,0x7e1d9000,0x40,0x1e000000,0x0,0x80,0x0,0xa0000,0x1e000000,0x0,0x0,0x0,0x80,0xc0,0x0,0x50000,0x0,0x50000,0x0,0x7e1d9000,0x0,0x7e1d9000,0x7e1d9000,0x0,0x7e1e1000,0x0,0x0,0x0,0x0,0x7e1e1000,0x0,0x7e1d9000,0x0,0x0,0x50000,0x7e1c9000,0x7e1c9000,0x280000,0x140,0x7e1d9000,0x7e1d9000,0x7e1d9000,0x0,0x80,0x0,0x0,0x6000,0x6000,0x0,0x0,0x1000,0x7e1e1000,0x15,0x15,0x8000,0x8000,0x0,0x0,0x0,0x0,0x2a,0x2a,0x0,0x0,0x60000000,0x0,0x1e1c1000,0x7e1c1000,0x1c0000,0x1c0000,0x0,0x0,0x7e1c9000,0x80050000,0x0,0x0,0x0,0x1e000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x20,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public C1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public C1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new C1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public C1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new C1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public C1(C1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(C1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 126; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[138];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 126; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 138; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
